.container.mx-auto.my-4
  .flex.items-center.text-sm.mb-1
    = link_to '< Back to board', board_path(@board), class: 'text-gray-400'
    = link_to 'Download CSV', params.to_unsafe_h.merge(format: :csv),
      class: 'text-gray-400 hover:text-blue-500 hover:border-blue-500 border border-gray-400 rounded px-1 ml-auto mr-5'

  #controls
    .flex.items-center
      %h1.text-lg
        = @board.name

      - submit_classes = 'hidden border border-blue-500 rounded px-2 py-1 bg-blue-500 text-white'

      %span.space-x-1.text-sm.mt-1.ml-2#ranges
        = link_to 'Last 2 weeks', { range: '2-weeks' }, class: submit_classes
        = link_to 'Last 4 weeks', { range: '4-weeks' }, class: submit_classes
        = link_to 'This quarter', { range: 'quarter' }, class: submit_classes

      %span.hidden.ml-3.text-gray-400 or

      = form_tag nil, method: :get, enforce_utf8: false, class: 'mt-1 text-sm ml-2 text-gray-400' do
        %button.border-b.border-dashed(type="button")
          = l @from, format: :with_day
        = date_field_tag :from, @from.iso8601, class: 'hidden w-36 border rounded px-1 ml-1 mr-1'

        = raw " &mdash; "

        %button.border-b.border-dashed(type="button")
          = l @to, format: :with_day
        = date_field_tag :to, @to.iso8601, class: 'hidden w-36 border rounded px-1 ml-1 mr-3'

        = button_tag 'Update', class: [*submit_classes, 'py-px'], name: nil

      %ul.flex.m-2.text-gray-500.ml-auto
        - @calculator.results.columns.reverse_each do |name|
          - next if name == 'date'
          %li.text-sm.flex.items-center.mr-4{ title: @calculator.class::GROUPINGS[name.to_sym].join(', ') }
            %span.inline-block.rounded-full.w-3.h-3.mr-1{ data: { name: name }}
            = name.titleize

  #graph

= javascript_include_tag 'https://cdn.jsdelivr.net/npm/d3@7'
= javascript_include_tag 'https://cdn.jsdelivr.net/npm/@observablehq/plot@0.2'

:javascript
  document.addEventListener('DOMContentLoaded', () => {
    const titleize = text => text
      .replace(/^[a-z]/, letter => letter.toUpperCase())
      .replace(/_([a-z])/, (_, letter) => ` ${letter.toUpperCase()}`)

    const controls = document.querySelector('#controls');
    const container = document.querySelector('#graph');

    controls.addEventListener("click", ({ target }) => {
      if (!target.matches('form button')) return;

      for (const element of [...controls.querySelectorAll('.hidden')]) {
        element.classList.remove('hidden');
      }

      for (const button of [...controls.querySelectorAll('form button[type="button"]')]) {
        button.classList.add('hidden');
      }
    });

    const rawData = #{raw @calculator.results.to_json};
    const data = [];

    for (const { date,...row } of rawData) {
      for (const [type, count] of Object.entries(row)) {
        data.push({ date: new Date(date), type, count });
      }
    }

    const options = {
      y: { grid: true },
      width: container.clientWidth,
      height: 600,
      marks: [
        Plot.areaY(data, Plot.stackY({
          x: 'date',
          y: 'count',
          fill: 'type',
          title: ({ type }) => titleize(type)
        }))
      ]
    };

    const plot = Plot.plot(options);
    const colourScheme = plot.scale('color');

    colourScheme.domain.forEach((name, index) => {
      const swatch = document.querySelector(`[data-name="${name}"]`);
      const colour = colourScheme.range[index];

      if (swatch && colour) (swatch.style.backgroundColor = colour);
    });

    container.appendChild(plot);
  });
